#!/usr/bin/env python3
"""
YAJPH Epistemic Development System Setup
Initializes a repository for epistemic code review
"""

import os
import sys
import shutil
import subprocess
from pathlib import Path


def create_directory_structure():
    """Create necessary directories"""
    directories = [
        '.yajph',
        '.yajph/trials',
        '.github/workflows'
    ]
    
    for directory in directories:
        Path(directory).mkdir(parents=True, exist_ok=True)
        print(f"‚úÖ Created directory: {directory}")


def create_code_review_config():
    """Create a basic code_review.yaml configuration"""
    config_content = """# Epistemic Code Review Configuration
# Customize this file for your project's needs

# Agent Configuration
agents:
  hype:
    model: "claude-3-sonnet"
    weight: 0.5
    default_confidence: 0.7
    prompt_template: |
      Analyze the positive aspects of this code change.
      Claim: {claim}
      Code Diff: {code_diff}
      
      Focus on improvements, optimizations, and benefits.
      Respond with JSON containing: confidence, issues, suggestions.
  
  critic:
    model: "deepseek-coder"  # Replace with your preferred model
    weight: 1.5
    default_confidence: 0.8
    prompt_template: |
      Critically analyze this code change for issues and risks.
      Claim: {claim}
      Code Diff: {code_diff}
      
      Focus on: security, performance, logic errors, breaking changes.
      Respond with JSON containing: confidence, issues, suggestions.

# Agent execution order
agent_chain:
  - hype
  - critic

# Deterministic checks (customize for your stack)
deterministic_checks:
  basic_syntax:
    type: "script"
    script: |
      # Basic syntax check - customize for your language
      echo "Running basic syntax validation..."
      exit 0
    expected_exit_code: 0
    critical: false
    description: "Basic syntax validation"

# Decision thresholds
approval_threshold: 0.75
rejection_threshold: 0.4
deterministic_weight: 1.5

# Output settings
output_dir: "."
"""
    
    with open('code_review.yaml', 'w') as f:
        f.write(config_content)
    
    print("‚úÖ Created code_review.yaml configuration")


def install_git_hook():
    """Install the pre-push Git hook"""
    hooks_dir = Path('.git/hooks')
    
    if not hooks_dir.exists():
        print("‚ùå Not a Git repository - run 'git init' first")
        return False
    
    hook_content = """#!/bin/bash
# YAJPH Epistemic Pre-Push Hook
# Auto-generated by setup script

echo "üîç YAJPH Epistemic Trial Starting..."

# Get commit info
CLAIM=$(git log -1 --pretty=%B)
CODE_DIFF=$(git diff HEAD^ HEAD)

# Run trial
echo "üìã Claim: $CLAIM"
echo "üîß Running epistemic trial..."

if yajph trial --claim "$CLAIM" --code-diff "$CODE_DIFF" 2>/dev/null; then
    if [ -f "VERDICT.json" ]; then
        STATUS=$(python3 -c "import json; print(json.load(open('VERDICT.json'))['status'])" 2>/dev/null)
        
        case $STATUS in
            "approved")
                echo "‚úÖ TRIAL PASSED - Push approved"
                ;;
            "rejected")
                echo "‚ùå TRIAL FAILED - Push rejected"
                echo "üìÑ See TRIAL.log for details"
                exit 1
                ;;
            "pending_human_review")
                echo "‚è≥ HUMAN REVIEW REQUIRED"
                echo "üìÑ See TRIAL.log for details"
                # Uncomment to block push: exit 1
                ;;
        esac
    fi
else
    echo "‚ö†Ô∏è Trial execution failed - proceeding with caution"
fi

echo "üîç Epistemic trial complete"
"""
    
    hook_path = hooks_dir / 'pre-push'
    with open(hook_path, 'w') as f:
        f.write(hook_content)
    
    # Make executable
    os.chmod(hook_path, 0o755)
    print("‚úÖ Installed pre-push Git hook")
    return True


def create_github_workflow():
    """Create GitHub Actions workflow"""
    workflow_content = """name: Epistemic Trial by Fire

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  epistemic-trial:
    runs-on: ubuntu-latest
    name: Run Epistemic Code Review
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 2
    
    - uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install YAJPH
      run: |
        pip install yajph
        # Or if developing locally: pip install -e .
    
    - name: Run Epistemic Trial
      run: |
        CLAIM="${{ github.event.pull_request.title }}"
        CODE_DIFF=$(git diff HEAD^ HEAD)
        yajph trial --claim "$CLAIM" --code-diff "$CODE_DIFF"
    
    - name: Upload Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: epistemic-trial-results
        path: |
          TRIAL.log
          VERDICT.json
    
    - name: Comment on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          try {
            const verdict = JSON.parse(fs.readFileSync('VERDICT.json', 'utf8'));
            const status = verdict.status;
            const confidence = (verdict.confidence * 100).toFixed(1);
            
            const statusIcon = {
              'approved': '‚úÖ',
              'rejected': '‚ùå', 
              'pending_human_review': '‚è≥'
            }[status] || '‚ùì';
            
            let comment = `## üîç Epistemic Trial Results\\n\\n`;
            comment += `**Status:** ${statusIcon} ${status.replace('_', ' ').toUpperCase()}\\n`;
            comment += `**Confidence:** ${confidence}%\\n\\n`;
            comment += `üìÑ Full trial log available in artifacts`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
          } catch (error) {
            console.log('Error posting comment:', error);
          }
"""
    
    workflow_path = Path('.github/workflows/epistemic-trial.yml')
    with open(workflow_path, 'w') as f:
        f.write(workflow_content)
    
    print("‚úÖ Created GitHub Actions workflow")


def create_readme():
    """Create a README explaining the setup"""
    readme_content = """# Epistemic Development System

This repository is now equipped with YAJPH's Epistemic Pull Request system!

## What This Means

Every code change is now subject to an "epistemic trial" - a transparent, AI-powered review process that:

- ‚úÖ **Validates claims** against actual code changes
- ü§ñ **Uses adversarial AI agents** to find both strengths and weaknesses  
- üìä **Provides confidence scores** and detailed reasoning
- üîç **Makes every decision auditable** through TRIAL.log files
- üõ†Ô∏è **Gives actionable feedback** for improvement

## How It Works

1. **Make changes** and commit with a clear message (your "claim")
2. **Push code** - the pre-push hook runs an epistemic trial
3. **AI agents analyze** your changes adversarially
4. **Get verdict**: approved, rejected, or pending human review
5. **Follow guidance** in TRIAL.log if changes are needed

## Files Added

- `code_review.yaml` - Configuration for AI agents and rules
- `.git/hooks/pre-push` - Git hook for local trials
- `.github/workflows/epistemic-trial.yml` - CI/CD integration
- `.yajph/` - Directory for trial history

## Customization

Edit `code_review.yaml` to:
- Configure AI models and agents
- Set approval thresholds
- Add deterministic checks
- Define custom rules

## Usage

```bash
# Run manual trial
yajph trial --claim "Add user authentication" --code-diff "$(git diff)"

# Check last trial result
cat VERDICT.json

# View detailed trial log  
cat TRIAL.log
```

## Philosophy

This system transforms software development from imperative tasks to **engineering knowledge**. Every code change becomes a testable claim, every decision is transparent, and every "no" comes with a roadmap to "yes".

---
*Powered by YAJPH - The Anti-Black-Box Engine*
"""
    
    with open('EPISTEMIC_README.md', 'w') as f:
        f.write(readme_content)
    
    print("‚úÖ Created EPISTEMIC_README.md")


def check_dependencies():
    """Check if required dependencies are available"""
    print("üîç Checking dependencies...")
    
    # Check Python
    if sys.version_info < (3, 8):
        print("‚ùå Python 3.8+ required")
        return False
    
    # Check Git
    try:
        subprocess.run(['git', '--version'], capture_output=True, check=True)
        print("‚úÖ Git available")
    except (subprocess.CalledProcessError, FileNotFoundError):
        print("‚ùå Git not found")
        return False
    
    # Check if in Git repo
    if not Path('.git').exists():
        print("‚ùå Not in a Git repository")
        return False
    
    print("‚úÖ All dependencies satisfied")
    return True


def main():
    """Main setup function"""
    print("üöÄ YAJPH Epistemic Development System Setup")
    print("=" * 50)
    
    if not check_dependencies():
        print("\n‚ùå Setup failed - please resolve dependency issues")
        sys.exit(1)
    
    print("\nüìÅ Setting up directory structure...")
    create_directory_structure()
    
    print("\n‚öôÔ∏è Creating configuration files...")
    create_code_review_config()
    
    print("\nü™ù Installing Git hooks...")
    if not install_git_hook():
        print("‚ö†Ô∏è Skipping Git hook installation")
    
    print("\nü§ñ Setting up GitHub Actions...")
    create_github_workflow()
    
    print("\nüìñ Creating documentation...")
    create_readme()
    
    print("\n" + "=" * 50)
    print("‚úÖ SETUP COMPLETE!")
    print("\nüéØ Next steps:")
    print("1. Customize code_review.yaml for your project")
    print("2. Configure AI model credentials (API keys)")
    print("3. Test with: yajph trial --claim 'Test setup' --code-diff ''")
    print("4. Make a commit to test the pre-push hook")
    print("\nüìö Read EPISTEMIC_README.md for full documentation")
    print("\nüîÆ Welcome to the future of transparent, AI-augmented development!")


if __name__ == "__main__":
    main()
